// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. npx prisma init
// 2. npx prisma migrate save --experimental
// 3. npx prisma migrate dev --name init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  imageUrl    String?
  signUpWith  String?
  joinedOn    DateTime?
  LinkPost    LinkPost[]
  Job         Job[]
  Ask         Ask[]
  Comment     Comment[]
  nextComment nextComment[]
}

model LinkPost {
  id              String            @id @default(uuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  title           String
  url             String?           @db.VarChar(512)
  tags            String?           @db.VarChar(512)
  updatedAt       DateTime          @default(now())
  createdAt       DateTime          @default(now())
  LinkPostTags    LinkPostTags[]
  LinkPostComment LinkPostComment[]
}

model Admin {
  id       String    @id @default(uuid())
  email    String?
  password String?
  joinedOn DateTime?
}

model LinkPostTags {
  id        String   @id @default(uuid())
  postID    String
  post      LinkPost @relation(fields: [postID], references: [id])
  tagId     String?  @default(uuid())
  tag       Tag?     @relation(fields: [tagId], references: [id])
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([postID, tagId])
}

model Ask {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  title     String
  text      String?   @db.VarChar(512)
  tags      String?   @db.VarChar(512)
  updatedAt DateTime  @default(now())
  createdAt DateTime  @default(now())
  AskTags   AskTags[]
}

model AskTags {
  id        String   @id @default(uuid())
  askId     String
  ask       Ask      @relation(fields: [askId], references: [id])
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id])
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([askId, tagId])
}

model Tag {
  id           String         @id @default(uuid())
  name         String         @unique
  updatedAt    DateTime       @default(now())
  createdAt    DateTime       @default(now())
  LinkPostTags LinkPostTags[]
  AskTags      AskTags[]
}

model Job {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  jobTitle       String
  jobDescription String?
  jobURL         String
  isActive       Boolean
  isRejected     Boolean?
  postedOn       DateTime
}

model Comment {
  id              String            @id @default(uuid())
  comment         String
  parentCommentID String?
  createdAt DateTime  @default(now())
  userID          String
  user            User              @relation(fields: [userID], references: [id])
  LinkPostComment LinkPostComment[]
}

model nextComment {
  id              String            @id @default(uuid())
  level           String?
  comment         String
  parentCommentID String
  childCommentID  String?
  createdAt DateTime  @default(now())
  userID          String
  user            User              @relation(fields: [userID], references: [id])
  LinkPostComment LinkPostComment[]
}

model LinkPostComment {
  id        String   @id @default(uuid())
  postID    String
  post      LinkPost @relation(fields: [postID], references: [id])
  commentID String
  comment   Comment  @relation(fields: [commentID], references: [id])
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([postID, commentID])
  nextComment   nextComment? @relation(fields: [nextCommentId], references: [id])
  nextCommentId String?
}
